/*
 * @Author: ouxuesen
 * @Date: 2022-04-24 15:01:13
 * @LastEditTime: 2022-04-24 18:31:09
 * @LastEditors: ouxuesen
 * @Description: 
 * @FilePath: /react-typescript-demo/src/_tests_/1234.test.ts
 * 一路向前
 */
import DefulatModel from '../pages/1024/yiModel'
test('1024 model 创建 测试', () => {
    let model = new DefulatModel(3)
    expect(model.matrix()).toEqual([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
    expect(model.coordinates(4)).toEqual({ x: 1, y: 1 })
    expect(model.coordinates(7)).toEqual({ x: 1, y: 2 })
    expect(model.acoordinates({ x: 2, y: 1 })).toBe(5)
    model.setPoint({ x: 0, y: 0 }, 2)
    model.setPoint({ x: 2, y: 2 }, 2)
    model.setPoint({ x: 1, y: 0 }, 2)
    expect(model.matrix()).toEqual([[2, 2, 0], [0, 0, 0], [0, 0, 2]])
    expect(model.getPoints().sort()).toEqual([{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 2 }])
    expect(model.getDirentPoint('left')).toEqual({ x: -1, y: 0 })
    expect(model.getDirentPoint('right')).toEqual({ x: 1, y: 0 })
    expect(model.getDirentPoint('top')).toEqual({ x: 0, y: -1 })
    expect(model.getDirentPoint('bottom')).toEqual({ x: 0, y: 1 })
    expect(model.pointAdd({ x: -1, y: 0 }, { x: 1, y: 0 }, { x: 1, y: 1 })).toEqual({ x: 1, y: 1 })
})
test('1024 move 测试', () => {
    let model = new DefulatModel(3)
    model.setPoint({ x: 0, y: 0 }, 2)
    model.setPoint({ x: 1, y: 0 }, 4)
    model.setPoint({ x: 2, y: 0 }, 8)
    expect(model.canmove('right')).toBeFalsy()
    expect(model.canmove('left')).toBeFalsy()
    expect(model.canmove('top')).toBeFalsy()
    expect(model.canmove('bottom')).toBeTruthy()
    //move
    model.move('bottom')
    expect(model.matrix()).toEqual([[0, 0, 0], [0, 0, 0], [2, 4, 8]])
})
test('1024 move  测试', () => {
    let model = new DefulatModel(3)
    model.setPoint({ x: 0, y: 0 }, 2)
    model.setPoint({ x: 1, y: 0 }, 2)
    model.setPoint({ x: 2, y: 0 }, 8)
    //can
    expect(model.canmove('right')).toBeTruthy()
    expect(model.canmove('left')).toBeTruthy()
    expect(model.canmove('top')).toBeFalsy()
    expect(model.canmove('bottom')).toBeTruthy()
    //move
    model.move('left')
    expect(model.matrix()).toEqual([[4, 8, 0], [0, 0, 0], [0, 0, 0]])
})
test('1024 move  测试', () => {
    let model = new DefulatModel(3)
    model.setPoint({ x: 0, y: 0 }, 2)
    model.setPoint({ x: 1, y: 1 }, 2)
    model.setPoint({ x: 2, y: 2 }, 2)
    //move
    model.move('right')
    expect(model.matrix()).toEqual([[0, 0, 2], [0, 0, 2], [0, 0, 2]])
    model.move('left')
    expect(model.matrix()).toEqual([[2, 0, 0], [2, 0, 0], [2, 0, 0]])
})
test('1024 move  测试', () => {
    let model = new DefulatModel(3)
    model.setPoint({ x: 0, y: 0 }, 2)
    model.setPoint({ x: 1, y: 0 }, 2)
    model.setPoint({ x: 2, y: 0 }, 2)
    //move
    model.move('right')
    expect(model.matrix()).toEqual([[0, 2, 4], [0, 0, 0], [0, 0, 0]])
})
test('1024 move  测试', () => {
    let model = new DefulatModel(3)
    model.setPoint({ x: 0, y: 0 }, 2)
    model.setPoint({ x: 1, y: 0 }, 2)
    model.setPoint({ x: 2, y: 0 }, 2)
    model.setPoint({ x: 0, y: 1 }, 2)
    model.setPoint({ x: 1, y: 1 }, 2)
    model.setPoint({ x: 2, y: 1 }, 2)
    model.setPoint({ x: 0, y: 2 }, 2)
    model.setPoint({ x: 1, y: 2 }, 2)
    model.setPoint({ x: 2, y: 2 }, 2)
    //move
    model.move('right')
    expect(model.matrix()).toEqual([[0, 2, 4], [0, 2, 4], [0, 2, 4]])
    let model_1 = new DefulatModel(3)
    model_1.setPoint({ x: 0, y: 0 }, 2)
    model_1.setPoint({ x: 1, y: 0 }, 2)
    model_1.setPoint({ x: 2, y: 0 }, 2)
    model_1.setPoint({ x: 0, y: 1 }, 2)
    model_1.setPoint({ x: 1, y: 1 }, 2)
    model_1.setPoint({ x: 2, y: 1 }, 2)
    model_1.setPoint({ x: 0, y: 2 }, 2)
    model_1.setPoint({ x: 1, y: 2 }, 2)
    model_1.setPoint({ x: 2, y: 2 }, 2)
    expect(model_1.move('left')).toBe(12)
    expect(model_1.matrix()).toEqual([[4, 2, 0], [4, 2, 0], [4, 2, 0]])
    let model_2 = new DefulatModel(3)
    model_2.setPoint({ x: 0, y: 0 }, 2)
    model_2.setPoint({ x: 1, y: 0 }, 2)
    model_2.setPoint({ x: 2, y: 0 }, 2)
    model_2.setPoint({ x: 0, y: 1 }, 2)
    model_2.setPoint({ x: 1, y: 1 }, 2)
    model_2.setPoint({ x: 2, y: 1 }, 2)
    model_2.setPoint({ x: 0, y: 2 }, 2)
    model_2.setPoint({ x: 1, y: 2 }, 2)
    model_2.setPoint({ x: 2, y: 2 }, 2)
    model_2.move('top')
    expect(model_2.matrix()).toEqual([[4, 4, 4], [2, 2, 2], [0, 0, 0]])
    let model_3 = new DefulatModel(3)
    model_3.setPoint({ x: 0, y: 0 }, 2)
    model_3.setPoint({ x: 1, y: 0 }, 2)
    model_3.setPoint({ x: 2, y: 0 }, 2)
    model_3.setPoint({ x: 0, y: 1 }, 2)
    model_3.setPoint({ x: 1, y: 1 }, 2)
    model_3.setPoint({ x: 2, y: 1 }, 2)
    model_3.setPoint({ x: 0, y: 2 }, 2)
    model_3.setPoint({ x: 1, y: 2 }, 2)
    model_3.setPoint({ x: 2, y: 2 }, 2)
    model_3.move('bottom')
    expect(model_3.matrix()).toEqual([[0, 0, 0], [2, 2, 2], [4, 4, 4]])
})